-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Infrastructure for the Snowdrift.coop fundraising site.
--   
--   Infrastructure for the Snowdrift.coop fundraising site.
@package Snowdrift
@version 0.1.4

module Model
data User
User :: !Text -> !ByteString -> User
[_userEmail] :: User -> !Text
[_userDigest] :: User -> !ByteString
type UserId = Key User
data VerifyEmail
VerifyEmail :: !Text -> !(Key User) -> VerifyEmail
[_verifyEmailKey] :: VerifyEmail -> !Text
[_verifyEmailUser] :: VerifyEmail -> !(Key User)
type VerifyEmailId = Key VerifyEmail
migrateAll :: Migration
verifyEmailUser :: Functor f => (Key User -> f (Key User)) -> VerifyEmail -> f VerifyEmail
verifyEmailKey :: Functor f => (Text -> f Text) -> VerifyEmail -> f VerifyEmail
userDigest :: Functor f => (ByteString -> f ByteString) -> User -> f User
userEmail :: Functor f => (Text -> f Text) -> User -> f User
instance Data.Aeson.Types.Class.FromJSON (Database.Persist.Class.PersistEntity.Key Model.User)
instance Data.Aeson.Types.Class.ToJSON (Database.Persist.Class.PersistEntity.Key Model.User)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Model.User)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Model.User)
instance Web.HttpApiData.Internal.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Model.User)
instance Web.HttpApiData.Internal.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Model.User)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Model.User)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Model.User)
instance Data.Aeson.Types.Class.FromJSON (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance Data.Aeson.Types.Class.ToJSON (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance Database.Persist.Sql.Class.PersistFieldSql (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance Database.Persist.Class.PersistField.PersistField (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance Web.HttpApiData.Internal.FromHttpApiData (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance Web.HttpApiData.Internal.ToHttpApiData (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance Web.PathPieces.PathPiece (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance GHC.Classes.Ord (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance GHC.Classes.Eq (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance GHC.Read.Read (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance GHC.Show.Show (Database.Persist.Class.PersistEntity.Key Model.VerifyEmail)
instance GHC.Show.Show Model.VerifyEmail
instance GHC.Show.Show Model.User
instance Database.Persist.Class.PersistField.PersistField Model.User
instance Database.Persist.Sql.Class.PersistFieldSql Model.User
instance Database.Persist.Class.PersistField.PersistField Model.VerifyEmail
instance Database.Persist.Sql.Class.PersistFieldSql Model.VerifyEmail
instance Database.Persist.Class.PersistEntity.PersistEntity Model.User
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.SqlBackend Model.User
instance Database.Persist.Class.PersistEntity.PersistEntity Model.VerifyEmail
instance Database.Persist.Class.PersistStore.ToBackendKey Database.Persist.Sql.Types.SqlBackend Model.VerifyEmail

module Alerts
alertDanger :: MonadHandler m => Html -> m ()
alertInfo :: MonadHandler m => Html -> m ()
alertSuccess :: MonadHandler m => Html -> m ()
alertWarning :: MonadHandler m => Html -> m ()
getAlert :: MonadHandler m => m (Maybe Html)


-- | Subsite for email-and-passphrase authentication.
--   
--   Quickstart:
--   
--   <ol>
--   <li>Add <a>AuthSite</a> as a subsite to your routes somewhere.</li>
--   <li>Mappend <a>migrateAuth</a> to your site's <a>Migration</a> when
--   running migrations.</li>
--   <li>Have your site datatype instantiate <a>AuthMaster</a> (this is the
--   hard part).</li>
--   </ol>
--   
--   This module is not yet fit for general consumption. It is tightly
--   coupled to some Snowdrift types and functions.
module AuthSite

-- | Foundation type for the subsite.
data AuthSite
AuthSite :: AuthSite
migrateAuth :: Migration

-- | Any site that uses this subsite needs to instantiate this class.
class AuthMaster master

-- | Where to go after login
postLoginRoute :: AuthMaster master => master -> Route master

-- | Where to go after logout
postLogoutRoute :: AuthMaster master => master -> Route master

-- | What to show on the login page. This page should have a form that
--   posts <a>Credentials</a> to 'Route LoginR'. See <tt>AuthHarness</tt>
--   in the tests for a simplistic example.
loginHandler :: AuthMaster master => HandlerT master IO TypedContent

-- | What to show on the create-account page. This page should post
--   <a>Credentials</a> to <a>CreateAccountR</a>.
createAccountHandler :: AuthMaster master => HandlerT master IO TypedContent

-- | What to show on the reset-passphrase page. This page should post
--   <a>Credentials</a> to <a>ResetPassphraseR</a>
resetPassphraseHandler :: AuthMaster master => HandlerT master IO TypedContent

-- | What to show on the verify-account page. This page should post
--   <a>Text</a> (the token) to <a>VerifyAccountR</a>
verifyAccountHandler :: AuthMaster master => HandlerT master IO TypedContent

-- | This module sends emails, in case that wasn't obvious.
--   <a>Network.Mail.Mime</a> or <a>Network.Mail.Mime.SES</a> have good
--   options for this method.
sendAuthEmail :: AuthMaster master => AuthEmail -> AuthMailMessage -> HandlerT master IO ()

-- | The <a>type-safe URLs</a> associated with a site argument.

-- | If the user is authenticated, get the corresponding Entity.
maybeAuth :: (YesodPersist m, YesodPersistBackend m ~ SqlBackend) => HandlerT m IO (Maybe AuthUser)

-- | If the user is <i>not</i> authenticated, this will cause a redirect to
--   your site's <a>authRoute</a> or simply return <a>notAuthenticated</a>.
--   
--   Note that <a>Yesod.Auth</a> is smarter about not redirecting during an
--   API request, but we don't support that yet.
requireAuth :: (Yesod m, YesodPersist m, YesodPersistBackend m ~ SqlBackend) => HandlerT m IO AuthUser

-- | A decent default form for <a>Credentials</a>.
credentialsForm :: (RenderMessage (HandlerSite m) FormMessage, MonadHandler m) => AForm m Credentials

-- | The "email and passphrase" representing the main purpose of this
--   module.
data Credentials
Credentials :: AuthEmail -> ClearPassphrase -> Credentials
[credsIdent] :: Credentials -> AuthEmail
[credsPass] :: Credentials -> ClearPassphrase

-- | Sanity-preserving type
newtype AuthEmail
AuthEmail :: Text -> AuthEmail
[fromAuth] :: AuthEmail -> Text

-- | Sanity-preserving type
newtype ClearPassphrase
ClearPassphrase :: Text -> ClearPassphrase
[fromClear] :: ClearPassphrase -> Text

-- | The type of message you are expected to send.
data AuthMailMessage

-- | A user is signing up
VerifyUserCreation :: AuthToken -> AuthMailMessage

-- | A user wants to reset their passphrase
VerifyPassReset :: AuthToken -> AuthMailMessage

-- | A user tried to sign up with an existing address
BadUserCreation :: AuthMailMessage

-- | A user tried to reset with an address that doesn't exist
BadPassReset :: AuthMailMessage

-- | A token used to confirm an email address.
newtype AuthToken
AuthToken :: Text -> AuthToken
[fromAuthToken] :: AuthToken -> Text

-- | This is a cheapo synonym. Eventually AuthUser should be part of the
--   <a>AuthMaster</a> interface, for this module to be usable outside of
--   Snowdrift.
type AuthUser = Entity User

-- | Generate a provisional user
provisional :: Credentials -> Verification -> IO ProvisionalUser

-- | Log out by deleting the session var
logout :: Yesod master => HandlerT master IO ()

-- | Store a provisional user for later verification. Returns the token to
--   use for verification.
priviligedProvisionalUser :: MonadIO m => Credentials -> SqlPersistT m Verification

-- | Insert a new user into the database.
privilegedCreateUser :: MonadIO m => VerifiedUser -> SqlPersistT m ()

-- | This privileged function must be used with care. It modifies the
--   user's session; it's the difference between being logged in and not!
priviligedLogin :: Yesod master => AuthUser -> HandlerT master IO ()

-- | Internal
data VerifiedUser
VerifiedUser :: Text -> ByteString -> VerifiedUser
[verifiedEmail] :: VerifiedUser -> Text
[verifiedDigest] :: VerifiedUser -> ByteString

-- | Internal
data Verification
Verification :: AuthEmail -> AuthToken -> Verification
[verifyEmail] :: Verification -> AuthEmail
[verifyToken] :: Verification -> AuthToken
data ProvisionalUser
ProvisionalUser :: !Text -> !ByteString -> !Text -> !UTCTime -> ProvisionalUser
[provisionalUserEmail] :: ProvisionalUser -> !Text
[provisionalUserDigest] :: ProvisionalUser -> !ByteString
[provisionalUserToken] :: ProvisionalUser -> !Text
[provisionalUserCreationTime] :: ProvisionalUser -> !UTCTime
instance GHC.Show.Show AuthSite.Verification
instance GHC.Show.Show AuthSite.Credentials
instance GHC.Show.Show AuthSite.PassphraseDigest
instance GHC.Show.Show AuthSite.ClearPassphrase
instance GHC.Show.Show AuthSite.AuthEmail
instance GHC.Show.Show AuthSite.AuthMailMessage
instance GHC.Show.Show AuthSite.AuthToken
instance (Yesod.Core.Class.Yesod.Yesod master, Yesod.Persist.Core.YesodPersist master, Yesod.Persist.Core.YesodPersistBackend master ~ Database.Persist.Sql.Types.SqlBackend, Text.Shakespeare.I18N.RenderMessage master Yesod.Form.Types.FormMessage, AuthSite.AuthMaster master) => Yesod.Core.Class.Dispatch.YesodSubDispatch AuthSiteTypes.AuthSite (Yesod.Core.Types.HandlerT master GHC.Types.IO)

module Css
data Color
DarkBlue :: Color
BrightBlue :: Color
BrightBlueText :: Color
White :: Color
Green :: Color
GreenShade :: Color
Gold :: Color
Red :: Color
data Breakpoint
Break1 :: Breakpoint
Break2 :: Breakpoint
Break3 :: Breakpoint
Break4 :: Breakpoint
Break5 :: Breakpoint
Break6 :: Breakpoint
instance Text.Css.ToCss Css.Color
instance Text.Css.ToCss Css.Breakpoint


-- | Settings are centralized, as much as possible, into this file. This
--   includes database connection settings, static file locations, etc. In
--   addition, you can configure a number of different aspects of Yesod by
--   overriding methods in the Yesod typeclass. That instance is declared
--   in the Foundation.hs file.
module Settings

-- | Runtime settings to configure this application. These settings can be
--   loaded from various sources: defaults, environment variables, config
--   files, theoretically even a database.
data AppSettings
AppSettings :: String -> PostgresConf -> Maybe Text -> HostPreference -> Int -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> AppSettings

-- | Directory from which to serve static files.
[appStaticDir] :: AppSettings -> String

-- | Configuration settings for accessing the database.
[appDatabaseConf] :: AppSettings -> PostgresConf

-- | Base for all generated URLs. If <tt>Nothing</tt>, determined from the
--   request headers.
[appRoot] :: AppSettings -> Maybe Text

-- | Host/interface the server should bind to.
[appHost] :: AppSettings -> HostPreference

-- | Port to listen on
[appPort] :: AppSettings -> Int

-- | Get the IP address from the header when logging. Useful when sitting
--   behind a reverse proxy.
[appIpFromHeader] :: AppSettings -> Bool

-- | Use detailed request logging system
[appDetailedRequestLogging] :: AppSettings -> Bool

-- | Should all log messages be displayed?
[appShouldLogAll] :: AppSettings -> Bool

-- | Use the reload version of templates
[appReloadTemplates] :: AppSettings -> Bool

-- | Assume that files in the static dir may change after compilation
[appMutableStatic] :: AppSettings -> Bool

-- | Perform no stylesheet/script combining
[appSkipCombining] :: AppSettings -> Bool

-- | Settings for <a>widgetFile</a>, such as which template languages to
--   support and default Hamlet settings.
--   
--   For more information on modifying behavior, see:
--   
--   <a>https://github.com/yesodweb/yesod/wiki/Overriding-widgetFile</a>
widgetFileSettings :: WidgetFileSettings

-- | How static files should be combined.
combineSettings :: CombineSettings
widgetFile :: String -> Q Exp

-- | Raw bytes at compile time of <tt>config/settings.yml</tt>
configSettingsYmlBS :: ByteString

-- | <tt>config/settings.yml</tt>, parsed to a <tt>Value</tt>.
configSettingsYmlValue :: Value

-- | A version of <tt>AppSettings</tt> parsed at compile time from
--   <tt>config/settings.yml</tt>.
compileTimeAppSettings :: AppSettings
combineStylesheets :: Name -> [Route Static] -> Q Exp
combineScripts :: Name -> [Route Static] -> Q Exp
instance Data.Aeson.Types.Class.FromJSON Settings.AppSettings

module Import.NoFoundation

module Avatar
getUserAvatar :: MonadHandler m => Route (HandlerSite m) -> Maybe User -> m Text


-- | TestHooks puts all dicey test-environment overrides in one place.
module TestHooks

-- | Don't use CSRF in testing.
middleware :: (Yesod site, ToTypedContent res) => HandlerT site IO res -> HandlerT site IO res

-- | Don't actually send email in testing OR development. FIXME: Do send
--   email in production, though :D
sendVerifyEmail :: MonadLogger m => Text -> t -> Text -> m ()

module Foundation

-- | The foundation datatype for your application. This can be a good place
--   to keep settings and values requiring initialization before your
--   application starts running, such as database connections. Every
--   handler will have access to the data present here.
data App
App :: AppSettings -> Static -> ConnectionPool -> Manager -> Logger -> GitRev -> AuthSite -> App
[appSettings] :: App -> AppSettings

-- | Settings for static file serving.
[appStatic] :: App -> Static

-- | Database connection pool.
[appConnPool] :: App -> ConnectionPool
[appHttpManager] :: App -> Manager
[appLogger] :: App -> Logger
[appGitRev] :: App -> GitRev
[appAuth] :: App -> AuthSite
type Handler = HandlerT App IO
type Widget = WidgetT App IO ()
resourcesApp :: [ResourceTree String]

-- | A convenient synonym for creating forms.
type Form x = Html -> MForm (HandlerT App IO) (FormResult x, Widget)
unsafeHandler :: App -> Handler a -> IO a
navbarLayout :: Text -> Widget -> Handler Html
instance GHC.Read.Read (Yesod.Routes.Class.Route Foundation.App)
instance GHC.Classes.Eq (Yesod.Routes.Class.Route Foundation.App)
instance GHC.Show.Show (Yesod.Routes.Class.Route Foundation.App)
instance Yesod.Routes.Class.ParseRoute Foundation.App
instance Yesod.Routes.Class.RenderRoute Foundation.App
instance Yesod.Routes.Class.RouteAttrs Foundation.App
instance Yesod.Core.Class.Yesod.Yesod Foundation.App
instance Yesod.Persist.Core.YesodPersist Foundation.App
instance Yesod.Persist.Core.YesodPersistRunner Foundation.App
instance AuthSite.AuthMaster Foundation.App
instance Text.Shakespeare.I18N.RenderMessage Foundation.App Yesod.Form.Types.FormMessage
instance Network.HTTP.Client.Types.HasHttpManager Foundation.App

module Import

module Handler.Util
snowdriftTitle :: MonadWidget m => Text -> m ()
snowdriftDashTitle :: MonadWidget m => Text -> Text -> m ()

module Handler.TH

-- | Generates things of type "Handler Html". Very useful for simple
--   handlers.
widget :: String -> Text -> Q Exp


-- | Common handler functions.
module Handler
getFaviconR :: Handler TypedContent
getRobotsR :: Handler TypedContent

-- | Homepage is an introduction to the site for non-logged-in viewers, and
--   the dashboard for logged-in viewers.
getHomeR :: Handler Html
getWelcomeR :: Handler Html
getDashboardR :: Handler Html
getHowItWorksR :: Handler Html
getPrivacyR :: Handler Html
getTermsR :: Handler Html
getSearchR :: Handler Html
getProjectsR :: Handler Html
getTrademarksR :: Handler Html
getDonateR :: Handler Html
getAboutR :: Handler Html
getSponsorsR :: Handler Html
getJsLicensesR :: Handler Html
getMerchandiseR :: Handler Html

-- | For MVP, there is one, hard-coded project: Snowdrift
getSnowdriftProjectR :: Handler Html

-- | Prevents breakage of external links to the old wiki. See
--   <a>https://tree.taiga.io/project/snowdrift/us/359</a>
getSnowdriftWikiSearchR :: Text -> Handler Html

module Application

-- | For yesod devel, return the Warp settings and WAI Application.
getApplicationDev :: IO (Settings, Application)

-- | The <tt>main</tt> function for an executable running this site.
appMain :: IO ()

-- | main function for use by yesod devel
develMain :: IO ()

-- | This function allocates resources (such as a database connection
--   pool), performs initialization and returns a foundation datatype
--   value. This is also the place to put your migrate statements to have
--   automatic database migrations handled by Yesod.
makeFoundation :: AppSettings -> IO App
makeLogWare :: App -> IO Middleware
getApplicationRepl :: IO (Int, App, Application)
shutdownApp :: App -> IO ()

-- | Run a handler
handler :: Handler a -> IO a

-- | Run DB queries
db :: ReaderT SqlBackend (HandlerT App IO) a -> IO a
instance Yesod.Core.Class.Dispatch.YesodDispatch Foundation.App
